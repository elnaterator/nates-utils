#!/usr/bin/env bash
set -euo pipefail

# Check for openssl
openssl_install_instructions() {
  echo "This script requires OpenSSL 1.0.0 or newer (not LibreSSL)." >&2
  echo "On macOS, you can install it with: brew install openssl" >&2
  echo "Then add it to your PATH by adding this to your shell profile (e.g., ~/.zshrc or ~/.bash_profile):" >&2
  echo '  export PATH="$(brew --prefix openssl)/bin:$PATH"' >&2
  echo "Then restart your terminal or run: source ~/.zshrc" >&2
}

if ! command -v openssl >/dev/null 2>&1; then
  echo "Error: openssl is not installed or not in your PATH." >&2
  openssl_install_instructions
  exit 1
fi

# Check for required OpenSSL version and features
OPENSSL_VERSION=$(openssl version | awk '{print $2}')
OPENSSL_MAJOR=$(echo "$OPENSSL_VERSION" | cut -d. -f1)
OPENSSL_MINOR=$(echo "$OPENSSL_VERSION" | cut -d. -f2)

# genpkey and pkeyutl are available in OpenSSL 1.0.0 and later, but not in LibreSSL or very old OpenSSL
if ! openssl list -commands | grep -wq genpkey; then
  echo "Error: Your openssl does not support 'genpkey'." >&2
  openssl_install_instructions
  exit 1
fi

if ! openssl list -commands | grep -wq pkeyutl; then
  echo "Error: Your openssl does not support 'pkeyutl'." >&2
  openssl_install_instructions
  exit 1
fi

# Simple vault for storing passwords and other secrets encrypted using RSA and secured with a master password.

vault_home=$HOME/.vault
private_key=$vault_home/id_rsa_vault
public_key=$vault_home/id_rsa_vault.pub
vault_secrets_dir=$vault_home/secrets

trap "exit 1" TERM
export TOP_PID=$$

nuke_vault() {
  echo -n "Are you sure you want to nuke the vault? This is irreversible and you will lose all secrets. (y/n): "
  read -r choice
  if [[ $choice != "y" ]]; then
    echo "aborting nuke."
    exit 1
  fi
  echo "nuking vault..."
  rm -rf $vault_home
  echo "done." >&2
}

get_master_passphrase() {
  local passphrase
  echo -n "master passphrase: " >&2
  read -s passphrase
  echo "" >&2
  echo $passphrase
}

create_rsa_key() {
  echo "creating rsa key pair..."
  local passphrase=$(get_master_passphrase)
  printf "%s" "$passphrase" | openssl genpkey -algorithm RSA -out "$private_key" -pkeyopt rsa_keygen_bits:4096 -quiet -pass stdin
  if [ $? -ne 0 ]; then
    echo "Error: Failed to generate private key." >&2
    unset passphrase
    exit 1
  fi
  chmod 600 "$private_key"
  openssl rsa -pubout -in "$private_key" -out "$public_key"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to generate public key." >&2
    unset passphrase
    exit 1
  fi
  unset passphrase
  echo "done."
}

get_option() {
  PS3=$1
  shift
  local opts=("$@")
  local choice
  select opt in "${opts[@]}"; do
    if [[ -n $opt ]]; then
      echo "$opt"
      break
    else
      echo "invalid option, try again." >&2
    fi
  done
}

add_secret() {
  echo "adding secret..."
  echo -n "enter an id for the secret: "
  read -r id
  # Validate secret id: only allow alphanumeric, dot, underscore, dash
  if [[ ! "$id" =~ ^[a-zA-Z0-9._-]+$ ]]; then
    echo "Invalid secret id. Use only letters, numbers, dots, underscores, or dashes."
    return 1
  fi
  if [ -e "$vault_secrets_dir/$id" ]; then
    echo "A secret with this id already exists. Overwrite? (y/N): "
    read -r confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
      echo "Aborted."
      return 1
    fi
  fi
  echo -n "enter the secret: "
  read -s secret
  printf "%s" "$secret" | openssl pkeyutl -encrypt -pubin -inkey "$public_key" -keyform PEM | openssl base64 > "$vault_secrets_dir/$id"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to encrypt and store the secret." >&2
    unset secret
    return 1
  fi
  chmod 600 "$vault_secrets_dir/$id"
  unset secret
  echo ""
  echo "done."
}

list_secret_ids() {
  echo "fetching secrets..." >&2
  local ids=$(ls $vault_secrets_dir)
  if [[ -z $ids ]]; then
    echo "No secrets found, try adding one first." >&2
    kill -s TERM $TOP_PID
  fi
  echo $ids
}

fetch_secret() {
  local ids=$(list_secret_ids)
  local id=$(get_option "which secret do you want to retrieve?: " $ids)
  local passphrase=$(get_master_passphrase)
  (
    echo "secret id    : $id"
    echo -n "secret value : "
    cat "$vault_secrets_dir/$id" | openssl base64 -d | openssl pkeyutl -decrypt -inkey "$private_key" -passin pass:$passphrase
    if [ ${PIPESTATUS[2]} -ne 0 ]; then
      echo "Error: Failed to decrypt the secret." >&2
    fi
  ) | less
  unset passphrase
  echo ""
  echo ""
}

remove_secret() {
  set -e
  local ids=$(list_secret_ids) || exit 1
  local id=$(get_option "which secret do you want to remove?: " $ids)
  rm "$vault_secrets_dir/$id"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to remove the secret." >&2
    return 1
  fi
  echo ""
  echo "done."
}

#
# Main vault execution
#

echo ""
echo " ___      ___  __      __    __   __    __________ "
echo " \  \    /  / /  \    |  |  |  | |  |  |___    ___|"
echo "  \  \  /  / /    \   |  |  |  | |  |      |  |    "
echo "   \  \/  / /  /\  \  |  |  |  | |  |      |  |    "
echo "    \    / /  ____  \ |  |__|  | |  |____  |  |    "
echo "     \__/ /__/    \__\ \______/  |_______| |__|    "
echo ""
echo ""

if [[ -f $private_key ]]; then
  echo ""
else
  echo "Setting up vault..."
  mkdir -p "$vault_home"
  chmod 700 "$vault_home"
  mkdir -p "$vault_secrets_dir"
  chmod 700 "$vault_secrets_dir"
  create_rsa_key
  echo ""
fi

choice=$(get_option "what do you want to do?: " "retrieve secret" "add secret" "remove secret" "nuke vault")
echo "Choice: $choice"
echo ""

if [[ $choice == "retrieve secret" ]]; then
  fetch_secret
elif [[ $choice == "add secret" ]]; then
  add_secret
elif [[ $choice == "remove secret" ]]; then
  remove_secret
elif [[ $choice == "nuke vault" ]]; then
  nuke_vault
fi
